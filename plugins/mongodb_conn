#!/usr/bin/python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongopython')
import mongodb_commands as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json
import math

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def must_print_key(key):
    return key == "current" or key == "available"

def get_server_data():
    return mongodb.getServerStatus()["connections"]

def print_values():
    for k, v in get_server_data().iteritems():
        if must_print_key(k):
            print("%s.value %d" % (safe_name(k), v))

def print_config_b():
    print("graph_title MongoDB connections")
    print("graph_args --base 1000")
    print("graph_vlabel number of connections")
    print("graph_order current available")

    available = get_server_data()["available"]
    print("current.label current connections")
    print("current.draw AREASTACK")
    print("current.critical 0:%d" % (available - min(10, int(math.ceil(available/100))) - 1))
    print("current.warning 0:%d" % (available - math.ceil(available/10) - 1))
    print("available.label available connections")
    print("available.draw AREASTACK")

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = environ['autoconftimeout']
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
