#!/usr/bin/env python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongopython')
import mongodb_commands as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def must_print_key(key):
    return key == "bytesIn" or key == "bytesOut"

def get_server_data():
    return mongodb.getServerStatus()["network"]

def print_values():
    for k, v in get_server_data().iteritems():
        if must_print_key(k):
            print("%s.value %d" % (safe_name(k), v))

def print_config_b():
    print("graph_title MongoDB network usage")
    print("graph_args --base 1000")
    print("graph_vlabel bits in (-) / out (+) per ${graph_period}")
    print("graph_order bytesIn bytesOut")

    print("bytesIn.label received")
    print("bytesIn.type DERIVE")
    print("bytesIn.min 0")
    print("bytesIn.graph no")
    print("bytesIn.cdef bytesIn,8,*")

    print("bytesOut.label traffic")
    print("bytesOut.type DERIVE")
    print("bytesOut.min 0")
    print("bytesOut.negative bytesIn")
    print("bytesOut.cdef bytesOut,8,*")

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = int(environ['autoconftimeout'])
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
