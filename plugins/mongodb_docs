#!/usr/bin/env python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongopython')
import mongodb_commands as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def get_server_data():
    return mongodb.getServerStatus()["metrics"]["document"]

def print_values():
    for k, v in get_server_data().iteritems():
        print("%s.value %d" % (safe_name(k), v))

def print_config_b():
    print("graph_title MongoDB document modifications")
    print("graph_args --base 1000")
    print("graph_vlabel document modifications / ${graph_period}")
    print("graph_total total document modifications")

    for k in get_server_data():
        print("%s.label %s documents" % (safe_name(k), k))
        print("%s.type DERIVE" % (safe_name(k)))
        print("%s.min 0" % (safe_name(k)))

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = int(environ['autoconftimeout'])
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
