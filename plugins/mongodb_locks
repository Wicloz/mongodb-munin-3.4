#!/usr/bin/python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongopython')
import mongodb_commands as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def print_values():
    values_oplog = {"R": 0, "W": 0, "r": 0, "w": 0}
    values_other = {"R": 0, "W": 0, "r": 0, "w": 0}

    for k, v in mongodb.getServerStatus()["locks"].iteritems():
        if v.has_key("acquireCount"):
            for kk, vv in v["acquireCount"].iteritems():
                if k == "oplog":
                    values_oplog[kk] += vv
                else:
                    values_other[kk] += vv

    for k, v in values_oplog.items():
        print("oplog_%s.value %d" % (k, v))
    for k, v in values_other.items():
        print("others_%s.value %d" % (k, v))

def print_config_b():
    print("graph_title MongoDB locks")
    print("graph_args --base 1000")
    print("graph_vlabel locks / ${graph_period}")

    if mongodb.getServerStatus()["locks"].has_key("oplog"):
        types = ["other", "oplog"]
        for type in types:
            print("%s_R.label Shared locks (%s)" % (type))
            print("%s_R.type DERIVE" % (type))
            print("%s_R.min 0" % (type))
            print("%s_W.label Exclusive locks (%s)" % (type))
            print("%s_W.type DERIVE" % (type))
            print("%s_W.min 0" % (type))
            print("%s_r.label Intent Shared locks (%s)" % (type))
            print("%s_r.type DERIVE" % (type))
            print("%s_r.min 0" % (type))
            print("%s_w.label Intent Exclusive locks (%s)" % (type))
            print("%s_w.type DERIVE" % (type))
            print("%s_w.min 0" % (type))

    else:
        print("other_R.label Shared locks")
        print("other_R.type DERIVE")
        print("other_R.min 0")
        print("other_W.label Exclusive locks")
        print("other_W.type DERIVE")
        print("other_W.min 0")
        print("other_r.label Intent Shared locks")
        print("other_r.type DERIVE")
        print("other_r.min 0")
        print("other_w.label Intent Exclusive locks")
        print("other_w.type DERIVE")
        print("other_w.min 0")

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = int(environ['autoconftimeout'])
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
