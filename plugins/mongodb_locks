#!/usr/bin/env python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongopython')
import mongodb_commands as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def print_values():
    acquireCount = {"R": 0, "W": 0, "r": 0, "w": 0}
    acquireWaitCount = {"R": 0, "W": 0, "r": 0, "w": 0}

    for k, v in mongodb.getServerStatus()["locks"].items():
        if v.has_key("acquireCount"):
            for kk, vv in v["acquireCount"].items():
                acquireCount[kk] += vv

    for k, v in mongodb.getServerStatus()["locks"].items():
        if v.has_key("acquireWaitCount"):
            for kk, vv in v["acquireWaitCount"].items():
                acquireWaitCount[kk] += vv

    for k, v in acquireCount.items():
        print("acquireCount_%s.value %d" % (k, v))
    for k, v in acquireWaitCount.items():
        print("acquireWaitCount_%s.value %d" % (k, v))

def print_config_b():
    print("graph_title MongoDB locks")
    print("graph_args --base 1000")
    print("graph_vlabel locks / ${graph_period}")

    print("acquireCount_R.label Acquired Shared locks")
    print("acquireCount_R.type DERIVE")
    print("acquireCount_R.min 0")
    print("acquireCount_W.label Acquired Exclusive locks")
    print("acquireCount_W.type DERIVE")
    print("acquireCount_W.min 0")
    print("acquireCount_r.label Acquired Intent Shared locks")
    print("acquireCount_r.type DERIVE")
    print("acquireCount_r.min 0")
    print("acquireCount_w.label Acquired Intent Exclusive locks")
    print("acquireCount_w.type DERIVE")
    print("acquireCount_w.min 0")

    print("acquireWaitCount_R.label Waiting Shared locks")
    print("acquireWaitCount_R.type DERIVE")
    print("acquireWaitCount_R.min 0")
    print("acquireWaitCount_W.label Waiting Exclusive locks")
    print("acquireWaitCount_W.type DERIVE")
    print("acquireWaitCount_W.min 0")
    print("acquireWaitCount_r.label Waiting Intent Shared locks")
    print("acquireWaitCount_r.type DERIVE")
    print("acquireWaitCount_r.min 0")
    print("acquireWaitCount_w.label Waiting Intent Exclusive locks")
    print("acquireWaitCount_w.type DERIVE")
    print("acquireWaitCount_w.min 0")

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = int(environ['autoconftimeout'])
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
