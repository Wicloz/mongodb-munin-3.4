#!/usr/bin/python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongostatus')
import mongodb_server_status as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def print_values():
    amount = {"R": 0, "W": 0, "r": 0, "w": 0}
    time = {"R": 0, "W": 0, "r": 0, "w": 0}

    for k, v in mongodb.getServerStatus()["locks"].iteritems():
        if v.has_key("acquireWaitCount"):
            for kk, vv in v["acquireWaitCount"].iteritems():
                amount[kk] += vv

    for k, v in mongodb.getServerStatus()["locks"].iteritems():
        if v.has_key("timeAcquiringMicros"):
            for kk, vv in v["timeAcquiringMicros"].iteritems():
                time[kk] += vv / 1000

    for k, v in amount.items():
        if v == 0:
            print("%s.value 0" % (k))
        else:
            print("%s.value %f" % (k, time[k] / v))

def print_config_b():
    print("graph_title MongoDB wait time per lock")
    print("graph_args --base 1000")
    print("graph_vlabel average wait time (sec / lock)")

    print("R.label Shared locks")
    print("W.label Exclusive locks")
    print("r.label Intent Shared locks")
    print("w.label Intent Exclusive locks")

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = environ['autoconftimeout']
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
