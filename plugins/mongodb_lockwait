#!/usr/bin/python

"""
Magic markers
#%# family=contrib
#%# capabilities=autoconf
"""

import sys
sys.path.insert(0, '/usr/lib/mongopython')
import mongodb_commands as mongodb
import re
try:
    import json
except ImportError:
    import simplejson as json

def safe_name(unsafe_name):
    return re.sub(r"[^A-Za-z0-9_]+", "_", unsafe_name)

"""
Begin unique section.
"""

def print_values():
    amount_oplog = {"R": 0, "W": 0, "r": 0, "w": 0}
    time_oplog = {"R": 0, "W": 0, "r": 0, "w": 0}
    amount_other = {"R": 0, "W": 0, "r": 0, "w": 0}
    time_other = {"R": 0, "W": 0, "r": 0, "w": 0}

    for k, v in mongodb.getServerStatus()["locks"].iteritems():
        if v.has_key("acquireWaitCount"):
            for kk, vv in v["acquireWaitCount"].iteritems():
                if k == "oplog":
                    amount_oplog[kk] += vv
                else:
                    amount_other[kk] += vv

    for k, v in mongodb.getServerStatus()["locks"].iteritems():
        if v.has_key("timeAcquiringMicros"):
            for kk, vv in v["timeAcquiringMicros"].iteritems():
                if k == "oplog":
                    time_oplog[kk] += float(vv) / 1000000
                else:
                    time_other[kk] += float(vv) / 1000000

    for k, v in amount_oplog.items():
        if v == 0:
            print("oplog_%s.value 0" % (k))
        else:
            print("oplog_%s.value %s" % (k, float(time_oplog[k]) / v))
    for k, v in amount_other.items():
        if v == 0:
            print("other_%s.value 0" % (k))
        else:
            print("other_%s.value %s" % (k, float(time_other[k]) / v))

def print_config_b():
    print("graph_title MongoDB wait time per lock")
    print("graph_args --base 1000")
    print("graph_vlabel average wait time (sec / lock)")

    if mongodb.getServerStatus()["locks"].has_key("oplog"):
        types = ["other", "oplog"]
        for type in types:
            print("%s_R.label Shared locks (%s)" % (type))
            print("%s_W.label Exclusive locks (%s)" % (type))
            print("%s_r.label Intent Shared locks (%s)" % (type))
            print("%s_w.label Intent Exclusive locks (%s)" % (type))

    else:
        print("other_R.label Shared locks")
        print("other_W.label Exclusive locks")
        print("other_r.label Intent Shared locks")
        print("other_w.label Intent Exclusive locks")

"""
End unique section.
"""

def print_config_a():
    print("graph_category mongodb")

def print_autoconf():
    from os import environ
    timeout = 3
    if 'autoconftimeout' in environ:
        timeout = int(environ['autoconftimeout'])
    try:
        mongodb.getServerStatus(timeout)
        print("yes")
    except:
        print("no (can't get mongodb server status)")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config_a()
            print_config_b()
        elif sys.argv[1] == "autoconf":
            print_autoconf()
    else:
        print_values()
